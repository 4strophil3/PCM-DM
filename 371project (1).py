# -*- coding: utf-8 -*-
"""371project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g5cG0vX7BwIrXHt0Vwzq51XxBSwAJEs6
"""

import numpy as np
import math

"""Define source message properties:"""

#message signal properties for cos part:

cos_amplitude = -1
cos_freq = 125.0 #Hz

#message signal properties for sin part:

sin_amplitude = 1
sin_freq = 35.0 #Hz

#banwith of the signal:

bw = max(cos_freq,sin_freq)

#nyquist sampling freq:

f_nyquist = 2 * bw

"""Question 1: Pulse Code Modulation (PCM)"""

#sampling properties:

fs1 = 1.5 * f_nyquist
d_time = 2.0 #duration time(sec)
time1 = np.arange(fs1 * d_time) / fs1

#message signal:

message1 = cos_amplitude * np.cos(2 * np.pi * cos_freq * time1) + sin_amplitude * np.sin(2 * np.pi * sin_freq * time1)

mq = np.zeros_like(message1) #quantized message

mp_p = 2
mp_n = -2 #max and min values

#PCM:

L = 64
bits = int(math.log2(L))
limits = np.linspace(mp_n, mp_p, L+1) #upper and lower limits of the levels

for i in range(len(message1)):
  for j in range(L - 1):
    if limits[j] < message1[i] <= limits[j+1]:
      mq[i] = L - 1 - j

out1 = [(np.binary_repr(int(mq[i]), bits)) for i in range(10)]
print(*out1, sep = "-")

"""Question 2: Delta Modulation(DM):"""

#sampling:

fs2 = 6 * f_nyquist
time2 = np.arange(fs2 * d_time) / fs2

#message signal:

message2 = cos_amplitude * np.cos(2 * np.pi * cos_freq * time2) + sin_amplitude * np.sin(2 * np.pi * sin_freq * time2)
derevative = 2 * np.pi * cos_freq * np.sin(2 * np.pi * cos_freq * time2) + 2 * np.pi * sin_freq * np.cos(2 * np.pi * sin_freq * time2)

#step_size:

step_size_min = (np.amax(derevative)) / fs2 # =0.69..
step_size = 0.7 #sec

#DM:

mq2 = np.zeros((len(message2), 1)) #modulated signal mq[k]
p = np.zeros((len(message2), 1)) #prediction

outt = []

for i, sampled_signal in enumerate(message2[1:]):
  difference = sampled_signal - p[i]
  if difference < 0:
    outt.append(0)
    mq2[i+1] = -1 * step_size
  if difference > 0:
    outt.append(1)
    mq2[i+1] = 1 * step_size
  p[i+1] = mq2[i+1] + p[i]

out2 = [outt[i] for i in range(20)]
print(*out2, sep = "-")